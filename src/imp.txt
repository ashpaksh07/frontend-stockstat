
Things can be taken from csv:
6700 neft
> NEFT/IMPS/RTGS or UPI transfer or Others : G1bar(4 col - total money, upi, neft, others)

> Net settlement  for  NSE-Equity with settlement 
number - Intraday settlement either profit or loss. : G2bar
> Net settlement for Equity with - amount due or receivable 
from equity trades after deducting charges : G2
> Net obligation for Equity F&O - F&O profit and loss : G2

> Payout of 6358.35/- to HDFC BANK LTD 05452470232462 A/C : G3 (pie)
number as per withdrawal request made on 2019-06-18 - account transfer
> Funds transferred back as part of quarterly settlement : G3


=================
> DP Charges for sale of - zerodha charges for sale of long term stock : G4 (pie)
> Call and Trade charges - Intraday charges : G4
> AMC for Demat Account - Account maintenance charges : G4
> Being payment gateway charges - When funds are added 
to the Zerodha account using netbanking a payment gateway 
charge of ₹9 + 18% GST is levied. : G4
> Being fee for smallcase - Smallcase fees : G4
> Kite Connect API Charges : G4
> Streak Monthly Subscription : G4
> Delayed payment charges for October - if balance goes negative : G4
> Securities Transaction Tax - direct tax charged on 
the purchase and sale of securities : G4
> Stamp Duty : G4
> MF Redemption credit for Nippon ETF LiqBeES - E-PAYOUTS 
FOR REDEMPTION/ DIVIDENDS​​ : G4

===============================================
import React, { useState } from "react";
import Papa from "papaparse";

// Allowed extensions for input file
const allowedExtensions = ["csv"];

const App = () => {
	
	// This state will store the parsed data
	const [data, setData] = useState([]);
	
	// It state will contain the error when
	// correct file extension is not used
	const [error, setError] = useState("");
	
	// It will store the file uploaded by the user
	const [file, setFile] = useState("");

	// This function will be called when
	// the file input changes
	const handleFileChange = (e) => {
		setError("");
		
		// Check if user has entered the file
		if (e.target.files.length) {
			const inputFile = e.target.files[0];
			
			// Check the file extensions, if it not
			// included in the allowed extensions
			// we show the error
			const fileExtension = inputFile?.type.split("/")[1];
			if (!allowedExtensions.includes(fileExtension)) {
				setError("Please input a csv file");
				return;
			}

			// If input type is correct set the state
			setFile(inputFile);
		}
	};
	const handleParse = () => {
		
		// If user clicks the parse button without
		// a file we show a error
		if (!file) return setError("Enter a valid file");

		// Initialize a reader which allows user
		// to read any file or blob.
		const reader = new FileReader();
		
		// Event listener on reader when the file
		// loads, we parse it and set the data.
		reader.onload = async ({ target }) => {
			const csv = Papa.parse(target.result, { header: true });
			const parsedData = csv?.data;
			const columns = Object.keys(parsedData[0]);
			setData(columns);
		};
		reader.readAsText(file);
	};

	return (
		<div>
			<label htmlFor="csvInput" style={{ display: "block" }}>
				Enter CSV File
			</label>
			<input
				onChange={handleFileChange}
				id="csvInput"
				name="file"
				type="File"
			/>
			<div>
				<button onClick={handleParse}>Parse</button>
			</div>
			<div style={{ marginTop: "3rem" }}>
				{error ? error : data.map((col,
				idx) => <div key={idx}>{col}</div>)}
			</div>
		</div>
	);
};

export default App;



